//
// Micro benchmark support
//

apply plugin: 'me.champeau.gradle.jmh'

ext {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version)
    String date = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("UTC"))

    // Environment for the run
    jmhRunDate = date
    jmhRunSha = bv.getLastCommitHash()
    jmhResultFileName = "${bv.getLastCommitHash()}-${date}.csv"
    jmhReportDir = "${project.buildDir}/reports/ubench/"
    jmhResultFile = project.file("$jmhReportDir/$jmhResultFileName")
}

// Setup JMH
jmh {
    //
    // Include only selected tests for benchmarking
    if (project.hasProperty('ubenchIncludeOnly')) {
        include = project.ubenchIncludeOnly
    }
    jmhVersion = '1.18'
    resultsFile = project.file("${project.buildDir}/reports/jmh/$jmhResultFileName")
    duplicateClassesStrategy = 'warn'
    resultFormat = 'SCSV'
    //
    // Attach different profilers (gc, stack summary, ...)
    // See: http://java-performance.info/introduction-jmh-profilers/
    //profilers = ['stack'] // ['hs_comp']
}

dependencies {
    jmh group: 'commons-io' , name: 'commons-io', version: '2.4'
}

task ubenchExec(type: JavaExec) {
    dependsOn project.jmhJar
    main = 'water.jmh.H2oJmhRunner'
    classpath = project.files { project.jmhJar.archivePath }

    environment["H2O_UBENCH_GIT_SHA"] = "${project.jmhRunSha}"
    environment["H2O_UBENCH_DATE"] = "${project.jmhRunDate}"
    environment["H2O_UBENCH_REPORT_FILE"] = "${project.jmhResultFile}"

    doFirst {
        args = [*args, *jmh.buildArgs()]
        jmh.humanOutputFile?.parentFile?.mkdirs()
        jmh.resultsFile?.parentFile?.mkdirs()
        project.jmhResultFile?.parentFile?.mkdirs()
    }
    doLast {
        logger.info("Ubench reported in ", jmhResultFile)
    }
}

task uploadResultsToS3(type: water.build.tasks.S3UploadTask) {
    bucket = "ai.h2o.ubench"
    objectName = "${project.name}/$jmhResultFileName"
    file = jmhResultFile
    enabled = project.hasProperty("doUploadUBenchResults") && project.doUploadUBenchResults == "true"
}

task ubench
ubench.dependsOn ubenchExec
ubench.dependsOn uploadResultsToS3
uploadResultsToS3.shouldRunAfter("jmh")
